package ru.larnerweb.vkloader.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.exceptions.TelegramApiRequestException;
import ru.larnerweb.vkloader.entity.vk.UsersGet;

import javax.annotation.PostConstruct;
import java.util.List;

@Service
public class TelegramBotService extends TelegramLongPollingBot {
    private static final Logger log = LoggerFactory.getLogger(TelegramBotService.class);

    @Autowired
    private VKClientService vkClientService;

    @Autowired
    private InMemoryGraphService graph;

    @Value("${app.telegram.token}")
    private String token;

    @Override
    public String getBotToken() {
        return this.token;
    }

    @Override
    public void onUpdateReceived(Update update) {
        log.info("Received message {}", update);

        if (update.hasMessage() && update.getMessage().hasText()){

            Message message = update.getMessage();

            switch (message.getText().split(" ")[0]){
                case "/search":
                    if (message.getText().split(" ").length == 1) {
                        sendMsg(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. \n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /search <i>user_from user_to</i>, –≥–¥–µ <i>user_from</i> –∏ <i>user_to</i> - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. \n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ /help\n\n", false);
                        break;
                    }

                    sendMsg(message, "–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! \u2705 \n\n–ü–æ–∏—Å–∫ —Ü–µ–ø–æ—á–∫–∏ –¥—Ä—É–∑–µ–π –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è... \u231B\n\n", false ); // (–Ω–µ—Ç üòè)
                    String from = message.getText().split(" ")[1];
                    String to = message.getText().split(" ")[2];
                    Integer from_id = vkClientService.getIdByDomain(from);
                    Integer to_id = vkClientService.getIdByDomain(to);

                    List<Integer> resultPath = graph.bfs(from_id, to_id);

                    if (resultPath != null) {
                        List<UsersGet> users = vkClientService.getDataByIds(resultPath);

                        sendMsg(message, "<b>–¶–µ–ø–æ—á–∫–∞ –¥—Ä—É–∑–µ–π –Ω–∞–π–¥–µ–Ω–∞!</b>",true);

                        for (UsersGet user : users) {
                            String resultMessage = "\u2B07\n" +
                                    String.format("<b>%s %s</b> \n<i>https://vk.com/%s</i>\n", user.getFirst_name(), user.getLast_name(), user.getDomain());
                            sendMsg(message, resultMessage,true);
                        }


                    }
                    else
                        sendMsg(message, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–¥–Ω–µ–µ...\n\n", true);
                    break;

                case "/info":
                    sendMsg(message, String.format(
                            "–°–æ–≥–ª–∞—Å–Ω–æ <a href='https://ru.wikipedia.org/wiki/–¢–µ–æ—Ä–∏—è_—à–µ—Å—Ç–∏_—Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–π'>–¢–µ–æ—Ä–∏–∏ —à–µ—Å—Ç–∏ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–π</a> –ª—é–±—ã–µ –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –º–∏—Ä–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–µ –±–æ–ª–µ–µ —á–µ–º –ø—è—Ç—å—é —É—Ä–æ–≤–Ω—è–º–∏ –æ–±—â–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö.\n\n" +
                            "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –í–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ç–µ–æ—Ä–∏—é –∏ –Ω–∞–π—Ç–∏ —Ü–µ–ø–æ—á–∫—É –æ–±—â–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö —Å—Ä–µ–¥–∏ –ª—é–±—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ—Ç–∏ '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ'.\n\n" +
                            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –±–æ—Ç–∞ %,d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ %,d –¥—Ä—É–∂–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π.\n\n" +
                            "–î–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n",
                            InMemoryGraphService.nodeCount, InMemoryGraphService.edgeCount), true
                    );
                    break;

                case "/help":
                    sendMsg(message, "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n /info - –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞\n /search <i>user_from user_to</i> - –ø–æ–∏—Å–∫ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ –¥—Ä—É–∑–µ–π, –≥–¥–µ <i>user_from</i> –∏ <i>user_to</i> - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. \n" +
                            "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –Ω–∞–ø—Ä–∏–º–µ—Ä https://vk.com/<b>durov</b>.", false);
                    break;
                default:
                    break;
            }
        }
    }

    private void sendMsg(Message message, String text, boolean preview) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.enableHtml(true);
        sendMessage.setChatId(message.getChatId());
        sendMessage.setText(text);

        if (!preview)
            sendMessage.disableWebPagePreview();

        try {
            execute(sendMessage); // Call method to send the message
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

    }

    @Override
    public String getBotUsername() {
        return "SixHandShakeBot";
    }

    @PostConstruct
    private void initBot() {
        TelegramBotsApi api = new TelegramBotsApi();
        try {
            api.registerBot(this);
        } catch (TelegramApiRequestException e) {
            e.printStackTrace();
        }
    }

}
